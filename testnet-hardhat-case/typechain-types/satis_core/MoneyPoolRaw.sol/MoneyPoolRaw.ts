/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MoneyPoolRawInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFundWithAction"
      | "addWorkers"
      | "clientNonce"
      | "fundSatisToken"
      | "getClientQueueValue"
      | "getInstantWithdrawReserve"
      | "instantWithdrawReserve"
      | "owner"
      | "ownerTakeProfit"
      | "proxy"
      | "removeWorkers"
      | "satisTokenBalance"
      | "sigmaProxy"
      | "totalLockedAssets"
      | "transferOwnership"
      | "updateProxyAddress"
      | "updateSigmaProxyAddress"
      | "verifyAndRedeemToken"
      | "verifyAndWithdrawFund"
      | "withdrawalQueue"
      | "workerDumpInstantWithdrawalFund"
      | "workerList"
      | "workerTakeLockedFund"
      | "workerTakeSatisToken"
      | "workerUnlockFund"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddWorkers"
      | "ChangeOwnership"
      | "ChangeProxy"
      | "ChangeSigmaProxy"
      | "OwnerTakeProfit"
      | "RemoveWorkers"
      | "WorkerDumpBridgedFund"
      | "WorkerDumpInstantWithdrawFund"
      | "WorkerTakeLockedFund"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFundWithAction",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWorkers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clientNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSatisToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientQueueValue",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstantWithdrawReserve",
    values: [string[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "instantWithdrawReserve",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerTakeProfit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "proxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWorkers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "satisTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sigmaProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProxyAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSigmaProxyAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndRedeemToken",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndWithdrawFund",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalQueue",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workerDumpInstantWithdrawalFund",
    values: [string[], AddressLike[], AddressLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "workerList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workerTakeLockedFund",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "workerTakeSatisToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "workerUnlockFund",
    values: [string[], AddressLike, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFundWithAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addWorkers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clientNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundSatisToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientQueueValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstantWithdrawReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantWithdrawReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTakeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "satisTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sigmaProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProxyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSigmaProxyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndRedeemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndWithdrawFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerDumpInstantWithdrawalFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workerList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workerTakeLockedFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerTakeSatisToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerUnlockFund",
    data: BytesLike
  ): Result;
}

export namespace AddWorkersEvent {
  export type InputTuple = [addWorkerList: AddressLike[]];
  export type OutputTuple = [addWorkerList: string[]];
  export interface OutputObject {
    addWorkerList: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeOwnershipEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeProxyEvent {
  export type InputTuple = [newProxy: AddressLike];
  export type OutputTuple = [newProxy: string];
  export interface OutputObject {
    newProxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeSigmaProxyEvent {
  export type InputTuple = [newSigmaProxy: AddressLike];
  export type OutputTuple = [newSigmaProxy: string];
  export interface OutputObject {
    newSigmaProxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerTakeProfitEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    takeProfitValue: BigNumberish
  ];
  export type OutputTuple = [tokenAddress: string, takeProfitValue: bigint];
  export interface OutputObject {
    tokenAddress: string;
    takeProfitValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveWorkersEvent {
  export type InputTuple = [removeWorkerList: AddressLike[]];
  export type OutputTuple = [removeWorkerList: string[]];
  export interface OutputObject {
    removeWorkerList: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkerDumpBridgedFundEvent {
  export type InputTuple = [
    workerAddress: AddressLike,
    clientAddressList: AddressLike[],
    tokenAddress: AddressLike,
    dumpValueList: BigNumberish[]
  ];
  export type OutputTuple = [
    workerAddress: string,
    clientAddressList: string[],
    tokenAddress: string,
    dumpValueList: bigint[]
  ];
  export interface OutputObject {
    workerAddress: string;
    clientAddressList: string[];
    tokenAddress: string;
    dumpValueList: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkerDumpInstantWithdrawFundEvent {
  export type InputTuple = [
    workerAddress: AddressLike,
    _clientAddressList: AddressLike[],
    _tokenAddress: AddressLike,
    _instantWithdrawValueList: BigNumberish[]
  ];
  export type OutputTuple = [
    workerAddress: string,
    _clientAddressList: string[],
    _tokenAddress: string,
    _instantWithdrawValueList: bigint[]
  ];
  export interface OutputObject {
    workerAddress: string;
    _clientAddressList: string[];
    _tokenAddress: string;
    _instantWithdrawValueList: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkerTakeLockedFundEvent {
  export type InputTuple = [
    workerAddress: AddressLike,
    tokenAddress: AddressLike,
    takeValue: BigNumberish
  ];
  export type OutputTuple = [
    workerAddress: string,
    tokenAddress: string,
    takeValue: bigint
  ];
  export interface OutputObject {
    workerAddress: string;
    tokenAddress: string;
    takeValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MoneyPoolRaw extends BaseContract {
  connect(runner?: ContractRunner | null): MoneyPoolRaw;
  waitForDeployment(): Promise<this>;

  interface: MoneyPoolRawInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFundWithAction: TypedContractMethod<
    [
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _addValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  addWorkers: TypedContractMethod<
    [_addWorkerList: AddressLike[]],
    [void],
    "nonpayable"
  >;

  clientNonce: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  fundSatisToken: TypedContractMethod<
    [_tokenAddress: AddressLike, _fundingValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getClientQueueValue: TypedContractMethod<
    [_clientAddressList: AddressLike[], _tokenAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  getInstantWithdrawReserve: TypedContractMethod<
    [_ticketIdList: string[], _tokenAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  instantWithdrawReserve: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerTakeProfit: TypedContractMethod<
    [_tokenAddress: AddressLike, _takeProfitValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  proxy: TypedContractMethod<[], [string], "view">;

  removeWorkers: TypedContractMethod<
    [_removeWorkerList: AddressLike[]],
    [void],
    "nonpayable"
  >;

  satisTokenBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  sigmaProxy: TypedContractMethod<[], [string], "view">;

  totalLockedAssets: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProxyAddress: TypedContractMethod<
    [_newProxyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSigmaProxyAddress: TypedContractMethod<
    [_newSigmaProxyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyAndRedeemToken: TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _redeemValue: BigNumberish,
      _tier: BigNumberish,
      _chainId: BigNumberish,
      _poolAddress: AddressLike,
      _expBlockNo: BigNumberish,
      _ticketId: string,
      _nonce: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  verifyAndWithdrawFund: TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _withdrawValue: BigNumberish,
      _tier: BigNumberish,
      _chainId: BigNumberish,
      _poolAddress: AddressLike,
      _expBlockNo: BigNumberish,
      _ticketId: string,
      _nonce: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  withdrawalQueue: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  workerDumpInstantWithdrawalFund: TypedContractMethod<
    [
      _ticketIdList: string[],
      _clientAddressList: AddressLike[],
      _tokenAddress: AddressLike,
      _instantWithdrawValueList: BigNumberish[],
      _totalDumpAmount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  workerList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  workerTakeLockedFund: TypedContractMethod<
    [_tokenAddress: AddressLike, _takeValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  workerTakeSatisToken: TypedContractMethod<
    [_tokenAddress: AddressLike, _takingValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  workerUnlockFund: TypedContractMethod<
    [
      _ticketIdList: string[],
      _tokenAddress: AddressLike,
      _unlockValueList: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFundWithAction"
  ): TypedContractMethod<
    [
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _addValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWorkers"
  ): TypedContractMethod<[_addWorkerList: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clientNonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundSatisToken"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _fundingValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClientQueueValue"
  ): TypedContractMethod<
    [_clientAddressList: AddressLike[], _tokenAddress: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInstantWithdrawReserve"
  ): TypedContractMethod<
    [_ticketIdList: string[], _tokenAddress: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "instantWithdrawReserve"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerTakeProfit"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _takeProfitValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeWorkers"
  ): TypedContractMethod<
    [_removeWorkerList: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "satisTokenBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "sigmaProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalLockedAssets"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProxyAddress"
  ): TypedContractMethod<[_newProxyAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSigmaProxyAddress"
  ): TypedContractMethod<
    [_newSigmaProxyAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyAndRedeemToken"
  ): TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _redeemValue: BigNumberish,
      _tier: BigNumberish,
      _chainId: BigNumberish,
      _poolAddress: AddressLike,
      _expBlockNo: BigNumberish,
      _ticketId: string,
      _nonce: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyAndWithdrawFund"
  ): TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _withdrawValue: BigNumberish,
      _tier: BigNumberish,
      _chainId: BigNumberish,
      _poolAddress: AddressLike,
      _expBlockNo: BigNumberish,
      _ticketId: string,
      _nonce: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalQueue"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "workerDumpInstantWithdrawalFund"
  ): TypedContractMethod<
    [
      _ticketIdList: string[],
      _clientAddressList: AddressLike[],
      _tokenAddress: AddressLike,
      _instantWithdrawValueList: BigNumberish[],
      _totalDumpAmount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "workerList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "workerTakeLockedFund"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _takeValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "workerTakeSatisToken"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _takingValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "workerUnlockFund"
  ): TypedContractMethod<
    [
      _ticketIdList: string[],
      _tokenAddress: AddressLike,
      _unlockValueList: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "AddWorkers"
  ): TypedContractEvent<
    AddWorkersEvent.InputTuple,
    AddWorkersEvent.OutputTuple,
    AddWorkersEvent.OutputObject
  >;
  getEvent(
    key: "ChangeOwnership"
  ): TypedContractEvent<
    ChangeOwnershipEvent.InputTuple,
    ChangeOwnershipEvent.OutputTuple,
    ChangeOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "ChangeProxy"
  ): TypedContractEvent<
    ChangeProxyEvent.InputTuple,
    ChangeProxyEvent.OutputTuple,
    ChangeProxyEvent.OutputObject
  >;
  getEvent(
    key: "ChangeSigmaProxy"
  ): TypedContractEvent<
    ChangeSigmaProxyEvent.InputTuple,
    ChangeSigmaProxyEvent.OutputTuple,
    ChangeSigmaProxyEvent.OutputObject
  >;
  getEvent(
    key: "OwnerTakeProfit"
  ): TypedContractEvent<
    OwnerTakeProfitEvent.InputTuple,
    OwnerTakeProfitEvent.OutputTuple,
    OwnerTakeProfitEvent.OutputObject
  >;
  getEvent(
    key: "RemoveWorkers"
  ): TypedContractEvent<
    RemoveWorkersEvent.InputTuple,
    RemoveWorkersEvent.OutputTuple,
    RemoveWorkersEvent.OutputObject
  >;
  getEvent(
    key: "WorkerDumpBridgedFund"
  ): TypedContractEvent<
    WorkerDumpBridgedFundEvent.InputTuple,
    WorkerDumpBridgedFundEvent.OutputTuple,
    WorkerDumpBridgedFundEvent.OutputObject
  >;
  getEvent(
    key: "WorkerDumpInstantWithdrawFund"
  ): TypedContractEvent<
    WorkerDumpInstantWithdrawFundEvent.InputTuple,
    WorkerDumpInstantWithdrawFundEvent.OutputTuple,
    WorkerDumpInstantWithdrawFundEvent.OutputObject
  >;
  getEvent(
    key: "WorkerTakeLockedFund"
  ): TypedContractEvent<
    WorkerTakeLockedFundEvent.InputTuple,
    WorkerTakeLockedFundEvent.OutputTuple,
    WorkerTakeLockedFundEvent.OutputObject
  >;

  filters: {
    "AddWorkers(address[])": TypedContractEvent<
      AddWorkersEvent.InputTuple,
      AddWorkersEvent.OutputTuple,
      AddWorkersEvent.OutputObject
    >;
    AddWorkers: TypedContractEvent<
      AddWorkersEvent.InputTuple,
      AddWorkersEvent.OutputTuple,
      AddWorkersEvent.OutputObject
    >;

    "ChangeOwnership(address)": TypedContractEvent<
      ChangeOwnershipEvent.InputTuple,
      ChangeOwnershipEvent.OutputTuple,
      ChangeOwnershipEvent.OutputObject
    >;
    ChangeOwnership: TypedContractEvent<
      ChangeOwnershipEvent.InputTuple,
      ChangeOwnershipEvent.OutputTuple,
      ChangeOwnershipEvent.OutputObject
    >;

    "ChangeProxy(address)": TypedContractEvent<
      ChangeProxyEvent.InputTuple,
      ChangeProxyEvent.OutputTuple,
      ChangeProxyEvent.OutputObject
    >;
    ChangeProxy: TypedContractEvent<
      ChangeProxyEvent.InputTuple,
      ChangeProxyEvent.OutputTuple,
      ChangeProxyEvent.OutputObject
    >;

    "ChangeSigmaProxy(address)": TypedContractEvent<
      ChangeSigmaProxyEvent.InputTuple,
      ChangeSigmaProxyEvent.OutputTuple,
      ChangeSigmaProxyEvent.OutputObject
    >;
    ChangeSigmaProxy: TypedContractEvent<
      ChangeSigmaProxyEvent.InputTuple,
      ChangeSigmaProxyEvent.OutputTuple,
      ChangeSigmaProxyEvent.OutputObject
    >;

    "OwnerTakeProfit(address,uint256)": TypedContractEvent<
      OwnerTakeProfitEvent.InputTuple,
      OwnerTakeProfitEvent.OutputTuple,
      OwnerTakeProfitEvent.OutputObject
    >;
    OwnerTakeProfit: TypedContractEvent<
      OwnerTakeProfitEvent.InputTuple,
      OwnerTakeProfitEvent.OutputTuple,
      OwnerTakeProfitEvent.OutputObject
    >;

    "RemoveWorkers(address[])": TypedContractEvent<
      RemoveWorkersEvent.InputTuple,
      RemoveWorkersEvent.OutputTuple,
      RemoveWorkersEvent.OutputObject
    >;
    RemoveWorkers: TypedContractEvent<
      RemoveWorkersEvent.InputTuple,
      RemoveWorkersEvent.OutputTuple,
      RemoveWorkersEvent.OutputObject
    >;

    "WorkerDumpBridgedFund(address,address[],address,uint256[])": TypedContractEvent<
      WorkerDumpBridgedFundEvent.InputTuple,
      WorkerDumpBridgedFundEvent.OutputTuple,
      WorkerDumpBridgedFundEvent.OutputObject
    >;
    WorkerDumpBridgedFund: TypedContractEvent<
      WorkerDumpBridgedFundEvent.InputTuple,
      WorkerDumpBridgedFundEvent.OutputTuple,
      WorkerDumpBridgedFundEvent.OutputObject
    >;

    "WorkerDumpInstantWithdrawFund(address,address[],address,uint256[])": TypedContractEvent<
      WorkerDumpInstantWithdrawFundEvent.InputTuple,
      WorkerDumpInstantWithdrawFundEvent.OutputTuple,
      WorkerDumpInstantWithdrawFundEvent.OutputObject
    >;
    WorkerDumpInstantWithdrawFund: TypedContractEvent<
      WorkerDumpInstantWithdrawFundEvent.InputTuple,
      WorkerDumpInstantWithdrawFundEvent.OutputTuple,
      WorkerDumpInstantWithdrawFundEvent.OutputObject
    >;

    "WorkerTakeLockedFund(address,address,uint256)": TypedContractEvent<
      WorkerTakeLockedFundEvent.InputTuple,
      WorkerTakeLockedFundEvent.OutputTuple,
      WorkerTakeLockedFundEvent.OutputObject
    >;
    WorkerTakeLockedFund: TypedContractEvent<
      WorkerTakeLockedFundEvent.InputTuple,
      WorkerTakeLockedFundEvent.OutputTuple,
      WorkerTakeLockedFundEvent.OutputObject
    >;
  };
}
