/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MoneyPoolV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "actionContractAddress"
      | "addFundWithAction"
      | "addWorkers"
      | "changeActionContract"
      | "changePool"
      | "getClientNonce"
      | "getLiquidityAmountInPool"
      | "getPoolAddress"
      | "getPoolOwner"
      | "owner"
      | "poolAddressList"
      | "removeWorkers"
      | "transferOwnershipMoneyPoolProxy"
      | "verifyAndPartialWithdrawFund"
      | "verifyAndQueue"
      | "verifyAndWithdrawFund"
      | "verifyWorker"
      | "workerList"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddWorkers"
      | "ChangeOwnership"
      | "ChangePoolAddress"
      | "RemoveWorkers"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "actionContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFundWithAction",
    values: [AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addWorkers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeActionContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changePool",
    values: [string[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientNonce",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityAmountInPool",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolOwner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolAddressList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWorkers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipMoneyPoolProxy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndPartialWithdrawFund",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndQueue",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndWithdrawFund",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyWorker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workerList",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "actionContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFundWithAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addWorkers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeActionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClientNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityAmountInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipMoneyPoolProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndPartialWithdrawFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndWithdrawFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workerList", data: BytesLike): Result;
}

export namespace AddWorkersEvent {
  export type InputTuple = [addWorkerList: AddressLike[]];
  export type OutputTuple = [addWorkerList: string[]];
  export interface OutputObject {
    addWorkerList: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeOwnershipEvent {
  export type InputTuple = [newAdminAddress: AddressLike];
  export type OutputTuple = [newAdminAddress: string];
  export interface OutputObject {
    newAdminAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangePoolAddressEvent {
  export type InputTuple = [newlyAddedPoolAddressList: AddressLike[]];
  export type OutputTuple = [newlyAddedPoolAddressList: string[]];
  export interface OutputObject {
    newlyAddedPoolAddressList: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveWorkersEvent {
  export type InputTuple = [removeWorkerList: AddressLike[]];
  export type OutputTuple = [removeWorkerList: string[]];
  export interface OutputObject {
    removeWorkerList: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MoneyPoolV2 extends BaseContract {
  connect(runner?: ContractRunner | null): MoneyPoolV2;
  waitForDeployment(): Promise<this>;

  interface: MoneyPoolV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  actionContractAddress: TypedContractMethod<[], [string], "view">;

  addFundWithAction: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish,
      _data: string,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;

  addWorkers: TypedContractMethod<
    [_addWorkerList: AddressLike[]],
    [void],
    "nonpayable"
  >;

  changeActionContract: TypedContractMethod<
    [_newActionContractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  changePool: TypedContractMethod<
    [_newPoolNameList: string[], _newPoolAddressList: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getClientNonce: TypedContractMethod<
    [_clientAddress: AddressLike, _poolName: string],
    [bigint],
    "view"
  >;

  getLiquidityAmountInPool: TypedContractMethod<
    [_tokenAddress: AddressLike, _poolName: string],
    [bigint],
    "view"
  >;

  getPoolAddress: TypedContractMethod<[_poolName: string], [string], "view">;

  getPoolOwner: TypedContractMethod<[_poolName: string], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poolAddressList: TypedContractMethod<[arg0: string], [string], "view">;

  removeWorkers: TypedContractMethod<
    [_removeWorkerList: AddressLike[]],
    [void],
    "nonpayable"
  >;

  transferOwnershipMoneyPoolProxy: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyAndPartialWithdrawFund: TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _tokenAddress: AddressLike,
      _partialWithdrawValue: BigNumberish,
      _tier: BigNumberish,
      _nonce: BigNumberish,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;

  verifyAndQueue: TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _tokenAddress: AddressLike,
      _queueValue: BigNumberish,
      _tier: BigNumberish,
      _nonce: BigNumberish,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;

  verifyAndWithdrawFund: TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _tokenAddress: AddressLike,
      _withdrawValue: BigNumberish,
      _tier: BigNumberish,
      _nonce: BigNumberish,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;

  verifyWorker: TypedContractMethod<
    [_workerAddress: AddressLike],
    [boolean],
    "view"
  >;

  workerList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "actionContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addFundWithAction"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish,
      _data: string,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWorkers"
  ): TypedContractMethod<[_addWorkerList: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeActionContract"
  ): TypedContractMethod<
    [_newActionContractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePool"
  ): TypedContractMethod<
    [_newPoolNameList: string[], _newPoolAddressList: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClientNonce"
  ): TypedContractMethod<
    [_clientAddress: AddressLike, _poolName: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidityAmountInPool"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _poolName: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAddress"
  ): TypedContractMethod<[_poolName: string], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolOwner"
  ): TypedContractMethod<[_poolName: string], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolAddressList"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "removeWorkers"
  ): TypedContractMethod<
    [_removeWorkerList: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnershipMoneyPoolProxy"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyAndPartialWithdrawFund"
  ): TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _tokenAddress: AddressLike,
      _partialWithdrawValue: BigNumberish,
      _tier: BigNumberish,
      _nonce: BigNumberish,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyAndQueue"
  ): TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _tokenAddress: AddressLike,
      _queueValue: BigNumberish,
      _tier: BigNumberish,
      _nonce: BigNumberish,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyAndWithdrawFund"
  ): TypedContractMethod<
    [
      _targetSignature: BytesLike,
      _tokenAddress: AddressLike,
      _withdrawValue: BigNumberish,
      _tier: BigNumberish,
      _nonce: BigNumberish,
      _poolName: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyWorker"
  ): TypedContractMethod<[_workerAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "workerList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AddWorkers"
  ): TypedContractEvent<
    AddWorkersEvent.InputTuple,
    AddWorkersEvent.OutputTuple,
    AddWorkersEvent.OutputObject
  >;
  getEvent(
    key: "ChangeOwnership"
  ): TypedContractEvent<
    ChangeOwnershipEvent.InputTuple,
    ChangeOwnershipEvent.OutputTuple,
    ChangeOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "ChangePoolAddress"
  ): TypedContractEvent<
    ChangePoolAddressEvent.InputTuple,
    ChangePoolAddressEvent.OutputTuple,
    ChangePoolAddressEvent.OutputObject
  >;
  getEvent(
    key: "RemoveWorkers"
  ): TypedContractEvent<
    RemoveWorkersEvent.InputTuple,
    RemoveWorkersEvent.OutputTuple,
    RemoveWorkersEvent.OutputObject
  >;

  filters: {
    "AddWorkers(address[])": TypedContractEvent<
      AddWorkersEvent.InputTuple,
      AddWorkersEvent.OutputTuple,
      AddWorkersEvent.OutputObject
    >;
    AddWorkers: TypedContractEvent<
      AddWorkersEvent.InputTuple,
      AddWorkersEvent.OutputTuple,
      AddWorkersEvent.OutputObject
    >;

    "ChangeOwnership(address)": TypedContractEvent<
      ChangeOwnershipEvent.InputTuple,
      ChangeOwnershipEvent.OutputTuple,
      ChangeOwnershipEvent.OutputObject
    >;
    ChangeOwnership: TypedContractEvent<
      ChangeOwnershipEvent.InputTuple,
      ChangeOwnershipEvent.OutputTuple,
      ChangeOwnershipEvent.OutputObject
    >;

    "ChangePoolAddress(address[])": TypedContractEvent<
      ChangePoolAddressEvent.InputTuple,
      ChangePoolAddressEvent.OutputTuple,
      ChangePoolAddressEvent.OutputObject
    >;
    ChangePoolAddress: TypedContractEvent<
      ChangePoolAddressEvent.InputTuple,
      ChangePoolAddressEvent.OutputTuple,
      ChangePoolAddressEvent.OutputObject
    >;

    "RemoveWorkers(address[])": TypedContractEvent<
      RemoveWorkersEvent.InputTuple,
      RemoveWorkersEvent.OutputTuple,
      RemoveWorkersEvent.OutputObject
    >;
    RemoveWorkers: TypedContractEvent<
      RemoveWorkersEvent.InputTuple,
      RemoveWorkersEvent.OutputTuple,
      RemoveWorkersEvent.OutputObject
    >;
  };
}
