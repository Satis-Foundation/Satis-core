/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SigmaActionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "proxy"
      | "sigmaAddFundWithAction"
      | "sigmaQueueWithdraw"
      | "sigmaVerifyAndRedeemToken"
      | "sigmaWithdrawFund"
      | "transferOwnership"
      | "updateProxyAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeOwnership"
      | "ChangeSigmaProxy"
      | "Queue"
      | "RedeemToken"
      | "TransferIn"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "proxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sigmaAddFundWithAction",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sigmaQueueWithdraw",
    values: [string, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sigmaVerifyAndRedeemToken",
    values: [string, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sigmaWithdrawFund",
    values: [string, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProxyAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sigmaAddFundWithAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigmaQueueWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigmaVerifyAndRedeemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigmaWithdrawFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProxyAddress",
    data: BytesLike
  ): Result;
}

export namespace ChangeOwnershipEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeSigmaProxyEvent {
  export type InputTuple = [newSigmaProxy: AddressLike];
  export type OutputTuple = [newSigmaProxy: string];
  export interface OutputObject {
    newSigmaProxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QueueEvent {
  export type InputTuple = [
    ticketId: string,
    clientAddress: AddressLike,
    tokenAddress: AddressLike,
    queueValue: BigNumberish
  ];
  export type OutputTuple = [
    ticketId: string,
    clientAddress: string,
    tokenAddress: string,
    queueValue: bigint
  ];
  export interface OutputObject {
    ticketId: string;
    clientAddress: string;
    tokenAddress: string;
    queueValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemTokenEvent {
  export type InputTuple = [
    ticketId: string,
    clientAddress: AddressLike,
    tokenAddress: AddressLike,
    transactionValue: BigNumberish
  ];
  export type OutputTuple = [
    ticketId: string,
    clientAddress: string,
    tokenAddress: string,
    transactionValue: bigint
  ];
  export interface OutputObject {
    ticketId: string;
    clientAddress: string;
    tokenAddress: string;
    transactionValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferInEvent {
  export type InputTuple = [
    clientAddress: AddressLike,
    tokenAddress: AddressLike,
    transactionValue: BigNumberish,
    data: string
  ];
  export type OutputTuple = [
    clientAddress: string,
    tokenAddress: string,
    transactionValue: bigint,
    data: string
  ];
  export interface OutputObject {
    clientAddress: string;
    tokenAddress: string;
    transactionValue: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    ticketId: string,
    clientAddress: AddressLike,
    tokenAddress: AddressLike,
    withdrawValue: BigNumberish
  ];
  export type OutputTuple = [
    ticketId: string,
    clientAddress: string,
    tokenAddress: string,
    withdrawValue: bigint
  ];
  export interface OutputObject {
    ticketId: string;
    clientAddress: string;
    tokenAddress: string;
    withdrawValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SigmaAction extends BaseContract {
  connect(runner?: ContractRunner | null): SigmaAction;
  waitForDeployment(): Promise<this>;

  interface: SigmaActionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  proxy: TypedContractMethod<[], [string], "view">;

  sigmaAddFundWithAction: TypedContractMethod<
    [
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish,
      _data: string
    ],
    [boolean],
    "nonpayable"
  >;

  sigmaQueueWithdraw: TypedContractMethod<
    [
      _ticketId: string,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  sigmaVerifyAndRedeemToken: TypedContractMethod<
    [
      _ticketId: string,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _redeemValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  sigmaWithdrawFund: TypedContractMethod<
    [
      _ticketId: string,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProxyAddress: TypedContractMethod<
    [_newProxyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sigmaAddFundWithAction"
  ): TypedContractMethod<
    [
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish,
      _data: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sigmaQueueWithdraw"
  ): TypedContractMethod<
    [
      _ticketId: string,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sigmaVerifyAndRedeemToken"
  ): TypedContractMethod<
    [
      _ticketId: string,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _redeemValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sigmaWithdrawFund"
  ): TypedContractMethod<
    [
      _ticketId: string,
      _clientAddress: AddressLike,
      _tokenAddress: AddressLike,
      _tokenValue: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProxyAddress"
  ): TypedContractMethod<[_newProxyAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChangeOwnership"
  ): TypedContractEvent<
    ChangeOwnershipEvent.InputTuple,
    ChangeOwnershipEvent.OutputTuple,
    ChangeOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "ChangeSigmaProxy"
  ): TypedContractEvent<
    ChangeSigmaProxyEvent.InputTuple,
    ChangeSigmaProxyEvent.OutputTuple,
    ChangeSigmaProxyEvent.OutputObject
  >;
  getEvent(
    key: "Queue"
  ): TypedContractEvent<
    QueueEvent.InputTuple,
    QueueEvent.OutputTuple,
    QueueEvent.OutputObject
  >;
  getEvent(
    key: "RedeemToken"
  ): TypedContractEvent<
    RedeemTokenEvent.InputTuple,
    RedeemTokenEvent.OutputTuple,
    RedeemTokenEvent.OutputObject
  >;
  getEvent(
    key: "TransferIn"
  ): TypedContractEvent<
    TransferInEvent.InputTuple,
    TransferInEvent.OutputTuple,
    TransferInEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ChangeOwnership(address)": TypedContractEvent<
      ChangeOwnershipEvent.InputTuple,
      ChangeOwnershipEvent.OutputTuple,
      ChangeOwnershipEvent.OutputObject
    >;
    ChangeOwnership: TypedContractEvent<
      ChangeOwnershipEvent.InputTuple,
      ChangeOwnershipEvent.OutputTuple,
      ChangeOwnershipEvent.OutputObject
    >;

    "ChangeSigmaProxy(address)": TypedContractEvent<
      ChangeSigmaProxyEvent.InputTuple,
      ChangeSigmaProxyEvent.OutputTuple,
      ChangeSigmaProxyEvent.OutputObject
    >;
    ChangeSigmaProxy: TypedContractEvent<
      ChangeSigmaProxyEvent.InputTuple,
      ChangeSigmaProxyEvent.OutputTuple,
      ChangeSigmaProxyEvent.OutputObject
    >;

    "Queue(string,address,address,uint256)": TypedContractEvent<
      QueueEvent.InputTuple,
      QueueEvent.OutputTuple,
      QueueEvent.OutputObject
    >;
    Queue: TypedContractEvent<
      QueueEvent.InputTuple,
      QueueEvent.OutputTuple,
      QueueEvent.OutputObject
    >;

    "RedeemToken(string,address,address,uint256)": TypedContractEvent<
      RedeemTokenEvent.InputTuple,
      RedeemTokenEvent.OutputTuple,
      RedeemTokenEvent.OutputObject
    >;
    RedeemToken: TypedContractEvent<
      RedeemTokenEvent.InputTuple,
      RedeemTokenEvent.OutputTuple,
      RedeemTokenEvent.OutputObject
    >;

    "TransferIn(address,address,uint256,string)": TypedContractEvent<
      TransferInEvent.InputTuple,
      TransferInEvent.OutputTuple,
      TransferInEvent.OutputObject
    >;
    TransferIn: TypedContractEvent<
      TransferInEvent.InputTuple,
      TransferInEvent.OutputTuple,
      TransferInEvent.OutputObject
    >;

    "Withdraw(string,address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
