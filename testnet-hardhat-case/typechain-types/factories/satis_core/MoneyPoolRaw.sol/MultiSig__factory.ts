/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MultiSig,
  MultiSigInterface,
} from "../../../satis_core/MoneyPoolRaw.sol/MultiSig";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "msg",
        type: "string",
      },
    ],
    name: "Debug",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_targetAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_targetSignature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "_clientAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_withdrawValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_poolAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "test_verifySignature",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_targetAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_targetSignature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "_clientAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_withdrawValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_poolAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "verifySignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610c1161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80634771dd5314610045578063f8be14681461006d575b600080fd5b61005861005336600461090f565b61008d565b60405190151581526020015b60405180910390f35b61008061007b36600461090f565b610203565b6040516100649190610a77565b6000806000806100d36040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6100dc8c61035e565b81526100e78b61035e565b60208201526100f58a610593565b604082015261010389610593565b606082015261011188610593565b608082015261011f8761035e565b60a082015261012d86610593565b60c0820181905281516020808401516040808601516060870151608088015160a089015193516101669897969394929391929101610a91565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c80850182905283518086039091018152605c909401909252825192019190912090945092506101d4838e6106b3565b73ffffffffffffffffffffffffffffffffffffffff908116908f16149450505050509998505050505050505050565b6060600080600061024a6040518060e00160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6102538c61035e565b815261025e8b61035e565b602082015261026c8a610593565b604082015261027a89610593565b606082015261028888610593565b60808201526102968761035e565b60a08201526102a486610593565b60c0820181905281516020808401516040808601516060870151608088015160a089015193516102dd9897969394929391929101610a91565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c80850182905283518086039091018152605c9094019092528251920191909120909450925061034b838e6106b3565b50519d9c50505050505050505050505050565b604080518082018252601081527f303132333435363738396162636465660000000000000000000000000000000060208201528151602a808252606082810190945273ffffffffffffffffffffffffffffffffffffffff85169291600091602082018180368337019050509050600360fc1b816000815181106103e3576103e3610b28565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061041257610412610b28565b60200101906001600160f81b031916908160001a90535060005b601481101561058a578260048561044484600c610b54565b6020811061045457610454610b28565b1a60f81b6001600160f81b031916901c60f81c60ff168151811061047a5761047a610b28565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016826104ad836002610b6c565b6104b8906002610b54565b815181106104c8576104c8610b28565b60200101906001600160f81b031916908160001a90535082846104ec83600c610b54565b602081106104fc576104fc610b28565b825191901a600f1690811061051357610513610b28565b01602001517fff000000000000000000000000000000000000000000000000000000000000001682610546836002610b6c565b610551906003610b54565b8151811061056157610561610b28565b60200101906001600160f81b031916908160001a9053508061058281610b8b565b91505061042c565b50949350505050565b6060816105b75750506040805180820190915260018152600360fc1b602082015290565b8160005b81156105e157806105cb81610b8b565b91506105da9050600a83610ba6565b91506105bb565b60008167ffffffffffffffff8111156105fc576105fc6108f9565b6040519080825280601f01601f191660200182016040528015610626576020820181803683370190505b509050815b851561058a5761063c600182610bc8565b9050600061064b600a88610ba6565b61065690600a610b6c565b6106609088610bc8565b61066b906030610bdf565b905060008160f81b90508084848151811061068857610688610b28565b60200101906001600160f81b031916908160001a9053506106aa600a89610ba6565b9750505061062b565b600081516041146107315760405162461bcd60e51b815260206004820152602d60248201527f496e636f7272656374207369676e6174757265206c656e6774682c206c656e6760448201527f7468206d7573742062652036350000000000000000000000000000000000000060648201526084015b60405180910390fd5b60208201516040830151604184015160ff1680158061075357508060ff166001145b8061076157508060ff16601b145b8061076f57508060ff16601c145b6107e15760405162461bcd60e51b815260206004820152602660248201527f5265636f76657220762076616c75652069732066756e64616d656e74616c6c7960448201527f2077726f6e6700000000000000000000000000000000000000000000000000006064820152608401610728565b601b8160ff1610156107fb576107f8601b82610bdf565b90505b8060ff16601b148061081057508060ff16601c145b6108685760405162461bcd60e51b815260206004820152602360248201527f5265636f76657220762076616c7565206572726f723a204e6f74203237206f7260448201526204064760eb1b6064820152608401610728565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156108bb573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146108f457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060008060006101208a8c03121561092e57600080fd5b6109378a6108d0565b985060208a013567ffffffffffffffff8082111561095457600080fd5b818c0191508c601f83011261096857600080fd5b81358181111561097a5761097a6108f9565b604051601f8201601f19908116603f011681019083821181831017156109a2576109a26108f9565b816040528281528f60208487010111156109bb57600080fd5b82602086016020830137600060208483010152809c5050505050506109e260408b016108d0565b96506109f060608b016108d0565b955060808a0135945060a08a0135935060c08a01359250610a1360e08b016108d0565b91506101008a013590509295985092959850929598565b6000815180845260005b81811015610a5057602081850181015186830182015201610a34565b81811115610a62576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610a8a6020830184610a2a565b9392505050565b60e081526000610aa460e083018a610a2a565b8281036020840152610ab6818a610a2a565b90508281036040840152610aca8189610a2a565b90508281036060840152610ade8188610a2a565b90508281036080840152610af28187610a2a565b905082810360a0840152610b068186610a2a565b905082810360c0840152610b1a8185610a2a565b9a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610b6757610b67610b3e565b500190565b6000816000190483118215151615610b8657610b86610b3e565b500290565b6000600019821415610b9f57610b9f610b3e565b5060010190565b600082610bc357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610bda57610bda610b3e565b500390565b600060ff821660ff84168060ff03821115610bfc57610bfc610b3e565b01939250505056fea164736f6c634300080c000a";

type MultiSigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSig__factory extends ContractFactory {
  constructor(...args: MultiSigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MultiSig & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MultiSig__factory {
    return super.connect(runner) as MultiSig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSigInterface {
    return new Interface(_abi) as MultiSigInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MultiSig {
    return new Contract(address, _abi, runner) as unknown as MultiSig;
  }
}
